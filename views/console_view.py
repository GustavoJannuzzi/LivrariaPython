"""
View para interface de console
Respons√°vel pela apresenta√ß√£o e intera√ß√£o com o usu√°rio via console
"""
import os
from typing import List, Optional
from pathlib import Path

from models.livro import Livro

class ConsoleView:
    """Interface de console para o sistema de livraria"""
    
    def __init__(self):
        self.largura_console = 80
    
    def limpar_tela(self):
        """Limpa a tela do console"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def exibir_cabecalho(self, titulo: str):
        """Exibe um cabe√ßalho formatado"""
        print("\n" + "="*self.largura_console)
        print(f"    {titulo.upper()}")
        print("="*self.largura_console)
    
    def exibir_linha_separadora(self):
        """Exibe uma linha separadora"""
        print("-"*self.largura_console)
    
    def exibir_menu_principal(self):
        """Exibe o menu principal do sistema"""
        self.exibir_cabecalho("SISTEMA DE GERENCIAMENTO DE LIVRARIA")
        opcoes = [
            "1. Adicionar novo livro",
            "2. Exibir todos os livros",
            "3. Atualizar pre√ßo de um livro",
            "4. Remover um livro",
            "5. Buscar livros por autor",
            "6. Buscar livros por t√≠tulo",
            "7. Busca avan√ßada",
            "8. Exportar dados para CSV",
            "9. Importar dados de CSV",
            "10. Fazer backup do banco de dados",
            "11. Restaurar backup",
            "12. Ver estat√≠sticas",
            "13. Gerar relat√≥rio completo",
            "14. Sair"
        ]
        
        for opcao in opcoes:
            print(opcao)
        self.exibir_linha_separadora()
    
    def solicitar_opcao_menu(self) -> str:
        """Solicita a op√ß√£o do menu ao usu√°rio"""
        return input("Escolha uma op√ß√£o (1-14): ").strip()
    
    def exibir_submenu(self, titulo: str):
        """Exibe um submenu"""
        print(f"\n--- {titulo} ---")
    
    def solicitar_dados_livro(self) -> dict:
        """Solicita os dados de um livro ao usu√°rio"""
        self.exibir_submenu("DADOS DO LIVRO")
        
        titulo = input("T√≠tulo: ").strip()
        autor = input("Autor: ").strip()
        ano = input("Ano de publica√ß√£o: ").strip()
        preco = input("Pre√ßo (R$): ").strip()
        
        return {
            'titulo': titulo,
            'autor': autor,
            'ano': ano,
            'preco': preco
        }
    
    def solicitar_id_livro(self, mensagem: str = "ID do livro") -> str:
        """Solicita um ID de livro ao usu√°rio"""
        return input(f"{mensagem}: ").strip()
    
    def solicitar_novo_preco(self) -> str:
        """Solicita um novo pre√ßo ao usu√°rio"""
        return input("Novo pre√ßo (R$): ").strip()
    
    def solicitar_texto(self, mensagem: str) -> str:
        """Solicita um texto ao usu√°rio"""
        return input(f"{mensagem}: ").strip()
    
    def solicitar_confirmacao(self, mensagem: str) -> bool:
        """Solicita confirma√ß√£o do usu√°rio"""
        resposta = input(f"{mensagem} (s/N): ").strip().lower()
        return resposta == 's'
    
    def exibir_livros(self, livros: List[Livro], titulo: str = "LIVROS"):
        """Exibe uma lista de livros formatada"""
        if not livros:
            print(f"\n{titulo}: Nenhum livro encontrado.")
            return
        
        self.exibir_submenu(f"{titulo} ({len(livros)} encontrados)")
        
        # Cabe√ßalho da tabela
        print(f"{'ID':<5} {'T√≠tulo':<35} {'Autor':<25} {'Ano':<6} {'Pre√ßo':<10}")
        self.exibir_linha_separadora()
        
        # Dados dos livros
        for livro in livros:
            titulo_truncado = livro.titulo[:34] + "..." if len(livro.titulo) > 34 else livro.titulo
            autor_truncado = livro.autor[:24] + "..." if len(livro.autor) > 24 else livro.autor
            
            print(f"{livro.id or 'N/A':<5} {titulo_truncado:<35} {autor_truncado:<25} "
                  f"{livro.ano_publicacao:<6} R${livro.preco:<9.2f}")
    
    def exibir_livro_detalhado(self, livro: Livro):
        """Exibe detalhes completos de um livro"""
        self.exibir_submenu("DETALHES DO LIVRO")
        print(f"ID: {livro.id}")
        print(f"T√≠tulo: {livro.titulo}")
        print(f"Autor: {livro.autor}")
        print(f"Ano de Publica√ß√£o: {livro.ano_publicacao}")
        print(f"Pre√ßo: R$ {livro.preco:.2f}")
    
    def exibir_arquivos_csv(self, arquivos: List[Path]):
        """Exibe lista de arquivos CSV dispon√≠veis"""
        if not arquivos:
            print("Nenhum arquivo CSV encontrado no diret√≥rio exports/")
            return
        
        self.exibir_submenu("ARQUIVOS CSV DISPON√çVEIS")
        for i, arquivo in enumerate(arquivos, 1):
            stat = arquivo.stat()
            tamanho_kb = stat.st_size / 1024
            print(f"{i}. {arquivo.name} ({tamanho_kb:.1f} KB)")
    
    def solicitar_escolha_arquivo(self, max_opcoes: int) -> str:
        """Solicita escolha de arquivo ao usu√°rio"""
        return input(f"Escolha um arquivo (1-{max_opcoes}) ou digite o nome: ").strip()
    
    def exibir_backups(self, backups: List[dict]):
        """Exibe lista de backups dispon√≠veis"""
        if not backups:
            print("Nenhum backup encontrado.")
            return
        
        self.exibir_submenu(f"BACKUPS DISPON√çVEIS ({len(backups)} encontrados)")
        print(f"{'#':<3} {'Nome do Arquivo':<35} {'Data/Hora':<20} {'Tamanho':<10}")
        self.exibir_linha_separadora()
        
        for i, backup in enumerate(backups, 1):
            nome = backup['nome'][:34] + "..." if len(backup['nome']) > 34 else backup['nome']
            tamanho_kb = backup['tamanho'] / 1024
            
            print(f"{i:<3} {nome:<35} {backup['data_criacao_str']:<20} {tamanho_kb:.1f} KB")
    
    def exibir_estatisticas(self, stats: dict):
        """Exibe estat√≠sticas do sistema"""
        self.exibir_submenu("ESTAT√çSTICAS DO SISTEMA")
        
        print(f"Total de livros: {stats['total_livros']}")
        
        if stats['total_livros'] > 0:
            print(f"Pre√ßo m√©dio: R$ {stats['preco_medio']:.2f}")
            print(f"Livro mais caro: R$ {stats['preco_maximo']:.2f}")
            print(f"Livro mais barato: R$ {stats['preco_minimo']:.2f}")
            print(f"Ano mais antigo: {stats['ano_mais_antigo']}")
            print(f"Ano mais recente: {stats['ano_mais_recente']}")
        
        print(f"Total de backups: {stats['total_backups']}")
        print(f"√öltimo backup: {stats['ultimo_backup']}")
    
    def exibir_relatorio_completo(self, relatorio: dict):
        """Exibe relat√≥rio completo do sistema"""
        self.exibir_submenu("RELAT√ìRIO COMPLETO DO SISTEMA")
        
        # Estat√≠sticas gerais
        print("\nüìä ESTAT√çSTICAS GERAIS:")
        stats = relatorio['estatisticas_gerais']
        print(f"   ‚Ä¢ Total de livros: {stats['total_livros']}")
        
        if stats['total_livros'] > 0:
            print(f"   ‚Ä¢ Pre√ßo m√©dio: R$ {stats['preco_medio']:.2f}")
            print(f"   ‚Ä¢ Faixa de pre√ßos: R$ {stats['preco_minimo']:.2f} - R$ {stats['preco_maximo']:.2f}")
            print(f"   ‚Ä¢ Per√≠odo: {stats['ano_mais_antigo']} - {stats['ano_mais_recente']}")
        
        # Top autores
        print("\nüë• TOP 5 AUTORES (por quantidade):")
        autores_ordenados = sorted(relatorio['por_autor'].items(), 
                                 key=lambda x: x[1]['quantidade'], reverse=True)[:5]
        
        for autor, dados in autores_ordenados:
            print(f"   ‚Ä¢ {autor}: {dados['quantidade']} livros (R$ {dados['preco_total']:.2f})")
        
        # Livros mais caros
        print("\nüí∞ TOP 5 LIVROS MAIS CAROS:")
        for livro in relatorio['livros_mais_caros']:
            print(f"   ‚Ä¢ {livro.titulo} - {livro.autor} (R$ {livro.preco:.2f})")
        
        # Livros mais antigos
        print("\nüìö TOP 5 LIVROS MAIS ANTIGOS:")
        for livro in relatorio['livros_mais_antigos']:
            print(f"   ‚Ä¢ {livro.titulo} - {livro.autor} ({livro.ano_publicacao})")
        
        # Distribui√ß√£o por d√©cada
        print("\nüóìÔ∏è  DISTRIBUI√á√ÉO POR D√âCADA:")
        decadas_ordenadas = sorted(relatorio['por_decada'].items())
        
        for decada, livros in decadas_ordenadas:
            print(f"   ‚Ä¢ {decada}s: {len(livros)} livros")
    
    def solicitar_filtros_busca_avancada(self) -> dict:
        """Solicita filtros para busca avan√ßada"""
        self.exibir_submenu("BUSCA AVAN√áADA - FILTROS")
        
        print("Digite os filtros desejados (deixe em branco para ignorar):")
        
        filtros = {}
        
        autor = input("Autor (busca parcial): ").strip()
        if autor:
            filtros['autor'] = autor
        
        titulo = input("T√≠tulo (busca parcial): ").strip()
        if titulo:
            filtros['titulo'] = titulo
        
        ano_min = input("Ano m√≠nimo: ").strip()
        if ano_min:
            try:
                filtros['ano_min'] = int(ano_min)
            except ValueError:
                pass
        
        ano_max = input("Ano m√°ximo: ").strip()
        if ano_max:
            try:
                filtros['ano_max'] = int(ano_max)
            except ValueError:
                pass
        
        preco_min = input("Pre√ßo m√≠nimo (R$): ").strip()
        if preco_min:
            try:
                filtros['preco_min'] = float(preco_min.replace(',', '.'))
            except ValueError:
                pass
        
        preco_max = input("Pre√ßo m√°ximo (R$): ").strip()
        if preco_max:
            try:
                filtros['preco_max'] = float(preco_max.replace(',', '.'))
            except ValueError:
                pass
        
        return filtros
    
    def exibir_mensagem_sucesso(self, mensagem: str):
        """Exibe uma mensagem de sucesso"""
        print(f"‚úÖ {mensagem}")
    
    def exibir_mensagem_erro(self, mensagem: str):
        """Exibe uma mensagem de erro"""
        print(f"‚ùå Erro: {mensagem}")
    
    def exibir_mensagem_aviso(self, mensagem: str):
        """Exibe uma mensagem de aviso"""
        print(f"‚ö†Ô∏è  {mensagem}")
    
    def exibir_mensagem_info(self, mensagem: str):
        """Exibe uma mensagem informativa"""
        print(f"‚ÑπÔ∏è  {mensagem}")
    
    def pausar(self, mensagem: str = "Pressione Enter para continuar..."):
        """Pausa a execu√ß√£o aguardando input do usu√°rio"""
        input(f"\n{mensagem}")
    
    def exibir_bem_vindo(self):
        """Exibe mensagem de boas-vindas"""
        self.limpar_tela()
        print("="*self.largura_console)
        print("üöÄ Bem-vindo ao Sistema de Gerenciamento de Livraria!")
        print("üìö Vers√£o 2.0 - Arquitetura MVC")
        print("="*self.largura_console)
    
    def exibir_despedida(self):
        """Exibe mensagem de despedida"""
        print("\n" + "="*self.largura_console)
        print("üìö Obrigado por usar o Sistema de Gerenciamento de Livraria!")
        print("üîÑ At√© a pr√≥xima!")
        print("="*self.largura_console)